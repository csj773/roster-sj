// ==================== server.js ====================
import express from "express";
import cors from "cors";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import fetch from "node-fetch";
import "dotenv/config";

const app = express();
app.use(express.json());
app.use(helmet());

// ------------------- CORS -------------------
app.use(cors({
  origin: [
    "https://your-flutterflow-app.web.app",
    "https://your-flutterflow-app.firebaseapp.com"
  ],
  methods: ["POST"],
}));

// ------------------- Rate Limit -------------------
const limiter = rateLimit({
  windowMs: 60 * 1000,
  max: 5,
  message: { error: "Too many requests" },
});

// ------------------- API Key -------------------
const API_KEY = process.env.API_KEY || "mysecret123";

// ------------------- POST /triggerWorkflow -------------------
app.post("/triggerWorkflow", limiter, async (req, res) => {
  try {
    const auth = req.headers["x-api-key"];  // FlutterFlow에서 header로 전달
    if (!auth || auth !== API_KEY) 
      return res.status(401).json({ error: "Unauthorized" });

    const { username, password } = req.body || {};
    if (!username || !password)
      return res.status(400).json({ error: "username and password required" });

    // GitHub repository 정보
    const repoOwner = "csj773";
    const repoName = "roster-sj";
    const workflowFile = "update-roster.yml";
    const branch = "main";

    console.log(`🚀 Triggering GitHub workflow for ${username}...`);

    const response = await fetch(
      `https://api.github.com/repos/${repoOwner}/${repoName}/actions/workflows/${workflowFile}/dispatches`,
      {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${process.env.GITHUB_TOKEN}`, // PAT
          "Accept": "application/vnd.github+json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          ref: branch,
          inputs: {
            PDC_USERNAME: username,
            PDC_PASSWORD: password
          }
        })
      }
    );

    const text = await response.text();

    if (!response.ok) {
      console.error("❌ GitHub API error:", text);
      return res.status(500).json({ error: "GitHub API error", details: text });
    }

    const workflowUrl = `https://github.com/${repoOwner}/${repoName}/actions`;
    res.json({
      ok: true,
      message: "Workflow triggered successfully",
      githubActionsUrl: workflowUrl
    });

  } catch (e) {
    console.error("❌ triggerWorkflow error:", e);
    res.status(500).json({ error: e.message });
  }
});

// ------------------- 서버 실행 -------------------
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`🚀 Server running on port ${PORT}`));
